#labels Phase-Implementation
= HRouter =

HRouter je téměř nejmocnější třída ve frameworku. Díky ní můžete jednoduše parsovat předané URL, vytvářet podmínky, odchytávat požadavky na alternativní zdroj (RSS, XML, apod.).

== Základní nastavení, ukázka ==

Třída HRouter ve výchozím nastavení parsuje URL pomocí následujícího volání:

{{{
HRouter::connect(':controller/:action', array('args' => true));
}}}

První fragment bude použit jako kontroler, druhý bude název metody třídy, a zbytek fragmentů se použije jako argumenty metody.
Tomuto pravidlu vyhoví URL s počtem argumentů >= 2.

== V praxi ==

Třídu lze samozřejmě používat samostatně. Jak tedy na to.
Nejdříve klaisicky "naincludujte" soubro h_router.php. Celou akci pak spustíte pomocí příkazu:

{{{
HRouter::start($url, $fileName);
}}}

První parametr obsahuje samostatné URL, jako druhý parametr se předává název souboru, nebo volatelná funkce, respektive metoda objektu.

Soubor nebo funkce pak obsahují volání routetu, které upravují jeho chování. Výsledek "růtování" potom přebíráme z jeho členských proměnných:

{{{
HRouter::$controller
HRouter::$method
HRouter::$args
}}}

== Možnosti volání metody `connect` ==

{{{
HRouter::connect($rule, $options);
}}}

Metoda `connect` očekává dva argumenty. Prvním je `$rule` ve tvaru řetězce, jako druhý parametr se předává pole `$options` s pokročilou konfigurací.

`$rule` udává, kdy se daný routing provede. Může obsahovat speciální výrazy a to:

 * `:controller`
 * `:action`
 * `:arg`

Při routingu se postupně porovnává fragment po fragmentu. Pokud HRouter narazí na jeden z těchto výrazů, pak mu vyhoví jakkýkoli řetězec, a zároveň se nastaví přílušná proměnná.

Příklady kdy `$rule` bude vyhovovat url `/test/edit/5`:

{{{
// vyhovuje:      ne
HRouter::connect('/test/edit');


// vyhovuje:      ano
HRouter::connect('/test/edit', array('args' => true));

// vyhovuje:      ano
HRouter::connect('/test/edit/5');
}}}

Další sada příkladů pro routing:

{{{
HRouter::connect('/:action/:controller', array('args' => true));
}}}

A přepisy URL:

{{{
//     /test/edit/5
//     /edit/test/5

//     /akce/zpet
//     /zpet/akce

//     /clanky/smaz/5/4/3
//     /smaz/clanky/5/4/3
}}}

Tímto jednoduchým voláním můžete velmi jednoduše prohodit zíkladní logiku routingu.

== Pokročilé možnostni ==

Velmi užitečnou možností je rozšířená konfiurace pomocí `$options`. Jak už jste si všimli, jedním z možných indexů pole je `args`, zde je kopletní výčet:

 * string `$controller`
 * string `$action`
 * boolean `$args`

Nyní je snad již jasné, že když nepoužijeme v `$rule` speciální výraz pro určení kontroleru apod., tak musíme onen kontroler (repspektive metodu) definovat zde.

=== Argumenty ===
Pokud `args` se rovná `true`, pak se všechny přebývající fragmenty předají jako argumenty. Jinak se vždy porovnávána přesná délka řetězce.

Jestliže víme přesný počet argumentú, je vhodnější použít výraz `:arg` v `$rule`.

== Ukázky ==

{{{
// vyhovi pri:       /
// stejne jako:      /clanky/zobraz

HRouter::connect('/', array(
    'controller' => 'clanky',
    'action'     => 'zobraz',
));




// vyhovi pri:       /clanky
// stejne jako:      /clanky/zobraz

HRouter::connect('/clanky', array(
    'action'     => 'zobraz',
));




// vyhovi pri:       /clanek
// stejne jako:      /clanky/zobraz

HRouter::connect('/clanek', array(
    'controller' => 'clanky'
    'action'     => 'zobraz',
));




// vyhovi pri:       /**cokoli**
// stejne jako:      /clanky/**cokoli**

HRouter::connect('/:action', array(
    'controller' => 'clanky'
));




// vyhovi pri:       /**cokoli**
// stejne jako:      /**cokoli**/zobraz

HRouter::connect('/:controller', array(
    'action' => 'zobraz'
));
}}}