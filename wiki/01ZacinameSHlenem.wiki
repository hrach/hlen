#labels Featured
=01. - Začínáme s Hlenem=

Hlen je téměř MVC framework, implementuje controller a view a můžete také jednoduše používat modelovou část.

Celá aplikace začíná souborem `index.php`. Do něj pomocí `.httacces` směřujeme všechny požadavky. V `.httacces` by mělo být:

{{{
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f 
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule !\.(pdf|php|js|ico|txt|gif|jpg|png|css|rar|zip|tar\.gz)$ index.php [L]
}}}

Samotný `index.php` má za úkol spustit aplikaci a provést její routing.
Začíst se dá snad jedině načtením knihovny `Autoload`, která bude obstarávat načtení všech pogtřebnych tříd, a to jak ze strany frameworku, tak i ze strany aplikace.

{{{
require_once 'hlen/hautoload.php';
}}}

A to je téměř vše, nyní zbývá aplikaci jen spustit.

{{{
HApplication::run();
}}}

Nyní přistupne k vlastním třídám aplikace. Hlen vyžaduje tuto strukturu:

{{{
index.php
/app
    /temp
    /controllers
    /views
        /_errors
        /_elements
}}}


Složce Temp nastavte přístupová práva na 0777.

==Jak se parsuje URL==

Url je parsováno klasicky, první pozici bere controller, dašlí je jeho metoda a zbyle segmenty jsou argumenty dané metody.

{{{
/controller/methoda/arg1/args2
}}}

Url ve tvar `/test/show/5` bude interně volat

{{{
TestController::show(5)
}}}

Z ukázky plyne, že název controller se "kamelizuje" a přídá se k němu suffix "Controller".  Tuto třídu můžete uložit pod jakkýmkoli názvem - Hlen neklade žádné konvence v pojmenování controllerů. Nemusíte soubor ani ukládat do složky `/app/controllers`. To ale nedoporučuji, vyhnete se tak nepořádku, a projekt bude také přehledný.

Podívejme se, jak by vypadala třída TestController:

{{{
class TestController extends Controller
{
	public function show($id)
	{
	
	}
}
}}}

Třída musí být potomkem třídy Controller. Pokud nyní přejdete na adresu `/test/show/5`, provede se tato metoda. Tedy skoro, ještě dříve Hlen "zařve", že nemáte vytvořen "View" soubor.

Vytvožte tedy šablonový soubor `/app/views/test/show.phtml`. Doufám, že logika je jasná.
Složka `views` obsahuje podsložky se jmény controllerů, v nich se pak nachází soubory s názvy metod mající přípony `.phtml`.

==Předání proměnné z controlleru do view==
Jednoduše řečeno, co si do view v metodě neuložíte, to tam nemáte. Jak se tedy ukládá?

{{{
$this->view->promenna = 'hodnota';
}}}

Ve view pak bude klasicky dostupná proměnná `$promenna`.

==Něco více k View==

Hlen neparsuje jen View, ale využívá také "layouty". Tzn., že view tvoří je obsah, ale na závěr je vložen do layoutu, který obalí hlavičkou, patičkou, atp.

Ve výchozím stavi se používá systémový layout. Ten je velmi strohý a tak si samozřejmě můžete vytvořit svůj vlastní. Ten uložte jako `/app/view/layout.phtml`. Tedy layouty nemají žádné podsložky.

Vnímavější si všimli mnou použitého plurálu layouty. Ano, můžeze mít samozřejmě více layoutů. Všechny se ukládají do složky s view, jména si volíte sami. Jako výchozí je ovšem brán 'layout.phtml'.

===Jak se mění layouty a view===
K čemu by nám ale bylo více layoutů, když je nemůžeme změnit. Ono se to docela často může hodit. Stejně tak se může hodit změnit view. Třeba hledáte určité položky, ale když zjistíte, že jste žádne nenašli a nemáte co vypsat, tak změníte view na jiný, který se nebude snažit vypsat seznam položek, ale informuje o špatném dotazu.

{{{
$this->view->view('example');
$this->view->layout('bez_menu');
}}}

U layoutů je jasné, že se vezme soubor s jasným názvem. U view je nutno podotknout, že stále pracuje v naší podsložce. Pokud chcete určit view "natvrdo", použijte na začátku řetězce znak `|`:

{{{
$this->view->view('|test2/error');
}}}

*Nepřidávejte příponu* - tu Hlen vždy přidá sám. Poslední zápis bude vždy směřovat na stejný soubor `/app/views/test2/error.phtml`.